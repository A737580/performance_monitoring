import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from nicegui import ui
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler


class ChartCard:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –ª–µ–≥–µ–Ω–¥–æ–π"""
    
    def __init__(self, title: str, description: str, figure):
        with ui.card().classes('w-full shadow-lg rounded-xl p-4 bg-white'):
            ui.label(title).classes('text-lg font-bold mb-1 text-blue-600')
            ui.label(description).classes('text-sm text-gray-600 mb-3 italic')
            ui.plotly(figure).classes('w-full')


class DataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def generate_error_data():
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –æ—à–∏–±–∫–∞—Ö"""
        np.random.seed(42)
        dates = pd.date_range('2025-10-01', periods=30, freq='D')
        error_codes = ['E01', 'E02', 'E03', 'E04', 'E05']
        
        data = []
        for date in dates:
            for i, code in enumerate(error_codes):
                data.append({
                    '–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏': date,
                    '–ö–æ–¥ –æ—à–∏–±–∫–∏': code,
                    '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞': np.random.uniform(0.1, 1.0),
                    '–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤': np.random.randint(1, 50)
                })
        
        return pd.DataFrame(data)


class ScatterPlotChart:
    """Scatter Plot - –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ - –æ—à–∏–±–∫–∞, —Ä–∞–∑–º–µ—Ä - –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        fig = go.Figure()
        
        for code in df['–ö–æ–¥ –æ—à–∏–±–∫–∏'].unique():
            code_data = df[df['–ö–æ–¥ –æ—à–∏–±–∫–∏'] == code]
            fig.add_trace(go.Scatter(
                x=code_data['–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏'],
                y=code_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                mode='markers',
                name=code,
                marker=dict(
                    size=code_data['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'] / 5,
                    opacity=0.7,
                    line=dict(width=2)
                ),
                text=[f"–û—à–∏–±–∫–∞: {c}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: {v:.2f}<br>–ü–æ–≤—Ç–æ—Ä–æ–≤: {r}" 
                      for c, v, r in zip(code_data['–ö–æ–¥ –æ—à–∏–±–∫–∏'], 
                                        code_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                                        code_data['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'])],
                hovertemplate='%{text}<extra></extra>'
            ))
        
        fig.update_layout(
            title='Scatter Plot: –û—à–∏–±–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ –¥–∞—Ç–∞–º',
            xaxis_title='–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
            height=500,
            hovermode='closest',
            template='plotly_white'
        )
        
        ChartCard('üìç Scatter Plot', '–ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ - –æ—à–∏–±–∫–∞, —Ä–∞–∑–º–µ—Ä - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤', fig)


class BarChartByError:
    """Bar Chart - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –∫–æ–¥–∞–º"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        error_stats = df.groupby('–ö–æ–¥ –æ—à–∏–±–∫–∏').agg({
            '–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤': 'sum',
            '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞': 'mean'
        }).reset_index()
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=error_stats['–ö–æ–¥ –æ—à–∏–±–∫–∏'],
            y=error_stats['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'],
            marker_color='#2563eb',
            text=error_stats['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'],
            textposition='auto',
            name='–í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'
        ))
        
        fig.update_layout(
            title='Bar Chart: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ –∫–æ–¥–∞–º',
            xaxis_title='–ö–æ–¥ –æ—à–∏–±–∫–∏',
            yaxis_title='–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤',
            height=400,
            template='plotly_white'
        )
        
        ChartCard('üìä Bar Chart', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–¥–∞–º –æ—à–∏–±–æ–∫', fig)


class BarChartByDate:
    """Bar Chart - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –¥–∞—Ç–∞–º"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏'].dt.strftime('%Y-%m-%d')
        
        date_stats = df.groupby('–î–∞—Ç–∞')['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'].sum().reset_index()
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=date_stats['–î–∞—Ç–∞'],
            y=date_stats['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'],
            marker_color='#16a34a',
            text=date_stats['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'],
            textposition='auto',
            name='–ü–æ–≤—Ç–æ—Ä—ã'
        ))
        
        fig.update_layout(
            title='Bar Chart: –î–∏–Ω–∞–º–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ –¥–Ω—è–º',
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤',
            height=400,
            template='plotly_white',
            xaxis={'tickangle': -45}
        )
        
        ChartCard('üìà Bar Chart by Date', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', fig)


class PieChart:
    """Pie Chart - –¥–æ–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        error_dist = df.groupby('–ö–æ–¥ –æ—à–∏–±–∫–∏')['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'].sum().reset_index()
        
        colors = ['#2563eb', '#16a34a', '#f59e0b', '#ef4444', '#8b5cf6']
        
        fig = go.Figure(data=[
            go.Pie(
                labels=error_dist['–ö–æ–¥ –æ—à–∏–±–∫–∏'],
                values=error_dist['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'],
                marker=dict(colors=colors),
                textinfo='label+percent',
                hovertemplate='<b>%{label}</b><br>–ü–æ–≤—Ç–æ—Ä–æ–≤: %{value}<br>–î–æ–ª—è: %{percent}<extra></extra>'
            )
        ])
        
        fig.update_layout(
            title='Pie Chart: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º',
            height=500,
            template='plotly_white'
        )
        
        ChartCard('ü•ß Pie Chart', '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫', fig)


class LineChart:
    """Line Chart - —Ç—Ä–µ–Ω–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        daily_avg = df.groupby('–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏')['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'].mean().reset_index()
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=daily_avg['–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏'],
            y=daily_avg['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
            mode='lines+markers',
            name='–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
            line=dict(color='#2563eb', width=3),
            marker=dict(size=6),
            fill='tozeroy',
            fillcolor='rgba(37, 99, 235, 0.2)'
        ))
        
        fig.update_layout(
            title='Line Chart: –¢—Ä–µ–Ω–¥ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
            height=400,
            template='plotly_white',
            hovermode='x unified'
        )
        
        ChartCard('üìâ Line Chart', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ—à–∏–±–æ–∫', fig)


class HeatmapChart:
    """Heatmap - –º–∞—Ç—Ä–∏—Ü–∞: –æ—à–∏–±–∫–∏ vs –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        # –°–æ–∑–¥–∞—ë–º –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–∫–∞ x –¥–∞—Ç–∞
        heatmap_data = df.pivot_table(
            index='–ö–æ–¥ –æ—à–∏–±–∫–∏',
            columns='–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏',
            values='–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤',
            fill_value=0
        )
        
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–Ω–µ–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        heatmap_data = heatmap_data.iloc[:, -15:]
        
        fig = go.Figure(data=go.Heatmap(
            z=heatmap_data.values,
            x=heatmap_data.columns.strftime('%Y-%m-%d'),
            y=heatmap_data.index,
            colorscale='YlOrRd',
            hovertemplate='–û—à–∏–±–∫–∞: %{y}<br>–î–∞—Ç–∞: %{x}<br>–ü–æ–≤—Ç–æ—Ä–æ–≤: %{z}<extra></extra>'
        ))
        
        fig.update_layout(
            title='Heatmap: –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –ø–æ –¥–∞—Ç–∞–º',
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='–ö–æ–¥ –æ—à–∏–±–∫–∏',
            height=400,
            template='plotly_white',
            xaxis={'tickangle': -45}
        )
        
        ChartCard('üî• Heatmap', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫ –ø–æ –∫–æ–¥–∞–º –∏ –¥–∞—Ç–∞–º (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞)', fig)


class BoxPlotChart:
    """Box Plot - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –æ—à–∏–±–∫–∞–º"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        fig = go.Figure()
        
        for code in sorted(df['–ö–æ–¥ –æ—à–∏–±–∫–∏'].unique()):
            code_data = df[df['–ö–æ–¥ –æ—à–∏–±–∫–∏'] == code]
            fig.add_trace(go.Box(
                y=code_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                name=code,
                boxmean='sd'
            ))
        
        fig.update_layout(
            title='Box Plot: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∫–æ–¥–∞–º –æ—à–∏–±–æ–∫',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
            height=400,
            template='plotly_white'
        )
        
        ChartCard('üì¶ Box Plot', '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏', fig)


class HistogramChart:
    """Histogram - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        fig = go.Figure()
        
        for code in sorted(df['–ö–æ–¥ –æ—à–∏–±–∫–∏'].unique()):
            code_data = df[df['–ö–æ–¥ –æ—à–∏–±–∫–∏'] == code]
            fig.add_trace(go.Histogram(
                x=code_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                name=code,
                opacity=0.6,
                nbinsx=15
            ))
        
        fig.update_layout(
            title='Histogram: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
            xaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
            yaxis_title='–ß–∞—Å—Ç–æ—Ç–∞',
            barmode='overlay',
            height=400,
            template='plotly_white'
        )
        
        ChartCard('üìä Histogram', '–ß–∞—Å—Ç–æ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–æ–¥–∞–º –æ—à–∏–±–æ–∫', fig)


class ClusterScatterPlot:
    """Scatter Plot —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π K-means"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        X = df[['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', '–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤']].values
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        # K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        kmeans = KMeans(n_clusters=3, random_state=42)
        df['Cluster'] = kmeans.fit_predict(X_scaled)
        
        fig = go.Figure()
        
        colors = ['#2563eb', '#16a34a', '#f59e0b']
        for i in range(3):
            cluster_data = df[df['Cluster'] == i]
            fig.add_trace(go.Scatter(
                x=cluster_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                y=cluster_data['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'],
                mode='markers',
                name=f'Cluster {i}',
                marker=dict(size=10, color=colors[i], opacity=0.7, line=dict(width=2)),
                text=[f"–û—à–∏–±–∫–∞: {c}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: {v:.2f}<br>–ü–æ–≤—Ç–æ—Ä–æ–≤: {r}<br>–ö–ª–∞—Å—Ç–µ—Ä: {cl}" 
                      for c, v, r, cl in zip(cluster_data['–ö–æ–¥ –æ—à–∏–±–∫–∏'],
                                            cluster_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                                            cluster_data['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'],
                                            cluster_data['Cluster'])],
                hovertemplate='%{text}<extra></extra>'
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã
        centers = scaler.inverse_transform(kmeans.cluster_centers_)
        fig.add_trace(go.Scatter(
            x=centers[:, 0],
            y=centers[:, 1],
            mode='markers',
            name='–¶–µ–Ω—Ç—Ä–æ–∏–¥—ã',
            marker=dict(size=20, color='red', symbol='star', line=dict(width=2, color='darkred')),
            hovertemplate='–¶–µ–Ω—Ç—Ä–æ–∏–¥<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{x:.2f}<br>–ü–æ–≤—Ç–æ—Ä–æ–≤: %{y:.0f}<extra></extra>'
        ))
        
        fig.update_layout(
            title='K-Means Clustering: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º',
            xaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
            yaxis_title='–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤',
            height=500,
            template='plotly_white',
            hovermode='closest'
        )
        
        ChartCard('üéØ K-Means Clustering', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ 3 –∫–ª–∞—Å—Ç–µ—Ä–∞', fig)


class BubbleChart:
    """Bubble Chart - 3D –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: –¥–∞—Ç–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        df = DataGenerator.generate_error_data()
        
        daily_error = df.groupby(['–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏', '–ö–æ–¥ –æ—à–∏–±–∫–∏']).agg({
            '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞': 'mean',
            '–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤': 'sum'
        }).reset_index()
        
        fig = go.Figure()
        
        for code in sorted(daily_error['–ö–æ–¥ –æ—à–∏–±–∫–∏'].unique()):
            code_data = daily_error[daily_error['–ö–æ–¥ –æ—à–∏–±–∫–∏'] == code]
            fig.add_trace(go.Scatter(
                x=code_data['–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏'],
                y=code_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                mode='markers',
                name=code,
                marker=dict(
                    size=code_data['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'] / 3,
                    opacity=0.6,
                    line=dict(width=2)
                ),
                text=[f"–û—à–∏–±–∫–∞: {c}<br>–î–∞—Ç–∞: {d.strftime('%Y-%m-%d')}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: {v:.2f}<br>–ü–æ–≤—Ç–æ—Ä–æ–≤: {r}" 
                      for c, d, v, r in zip(code_data['–ö–æ–¥ –æ—à–∏–±–∫–∏'],
                                           code_data['–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏'],
                                           code_data['–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'],
                                           code_data['–ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤'])],
                hovertemplate='%{text}<extra></extra>'
            ))
        
        fig.update_layout(
            title='Bubble Chart: –û—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–∑–º–µ—Ä = –ø–æ–≤—Ç–æ—Ä—ã)',
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
            height=500,
            template='plotly_white',
            hovermode='closest'
        )
        
        ChartCard('ü´ß Bubble Chart', '–¢—Ä—ë—Ö–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: –¥–∞—Ç–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤', fig)


class Header:
    """–í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å"""
    
    def __init__(self):
        with ui.header().classes('w-full bg-gradient-to-r from-blue-600 to-blue-800 text-white shadow-md p-4'):
            with ui.row().classes('w-full justify-between items-center'):
                ui.label('üìä CHART TYPES SHOWCASE').classes('text-2xl font-bold')
                ui.label('K-Means Clustering & Error Analysis').classes('text-sm opacity-75')


class Footer:
    """–ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å"""
    
    def __init__(self):
        with ui.footer().classes('w-full bg-gray-900 text-white text-center p-4'):
            ui.label('¬© 2025 Analytics | –í—Å–µ —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏')


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    ui.page_title('Chart Types Showcase')
    ui.query('body').style('background: linear-gradient(135deg, #f8fafc 0%, #e0e7ff 100%);')
    
    Header()
    
    with ui.column().classes('w-full max-w-7xl mx-auto px-4 py-6 gap-6'):
        ui.label('–í—Å–µ —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö').classes('text-3xl font-bold text-center text-blue-700 mb-4')
        ui.label('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö').classes('text-center text-gray-600 mb-6')
        
        with ui.tabs().classes('w-full'):
            with ui.tab('üìç Scatter & Bubble'):
                with ui.column().classes('w-full gap-6'):
                    ScatterPlotChart()
                    BubbleChart()
            
            with ui.tab('üìä Bar & Pie'):
                with ui.column().classes('w-full gap-6'):
                    BarChartByError()
                    BarChartByDate()
                    PieChart()
            
            with ui.tab('üìà Line & Trends'):
                with ui.column().classes('w-full gap-6'):
                    LineChart()
                    BoxPlotChart()
            
            with ui.tab('üî• Heatmap & Distribution'):
                with ui.column().classes('w-full gap-6'):
                    HeatmapChart()
                    HistogramChart()
            
            with ui.tab('üéØ Clustering'):
                with ui.column().classes('w-full gap-6'):
                    ClusterScatterPlot()
    
    Footer()


if __name__ in {"__main__", "__mp_main__"}:
    @ui.page("/")
    def index():
        main()
    ui.run(port=8080)